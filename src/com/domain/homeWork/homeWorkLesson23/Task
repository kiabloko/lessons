Client:
Читает сообщение от пользователя (из консоли), формирует объект сообщения и отправляет на сервер.
Получает входящие (от сервера) сообщения и выводит их в консоль.
Потоки, создаваемые на клиенте:

main поток (формирование и отправка сообщений)
reader поток (читает сообщения от сервера)
Подключение к серверу с использованием сокетов (tcp)

Socket socket = new Socket(String host, int port); - создание объекта + подключение к серверу либо
Socket socket = new Socket(); - создание объекта
SocketAddress serverAddr = new InetSocketAddress(String host, int port);
socket.connect(serverAddr); - подключение к серверу
Server:
Получает сообщение от клиента.
Отправляет сообщение всем подключенным клиентам.
Сообщение не должно пересылаться отправителю.
Сокеты на стороне сервера:

ServerSocket serverSocket = new ServerSocket(port); ждет входящие подключения
Socket clientSocket = serverSocket.accept(); устанавливает соединение (воссоздавая клиентский сокет)
Для формирования уникального идентификатора соединения можно использовать следующие методы (либо придумать свою систему идентификации):

clientSocket.getRemoteSocketAddress();
clientSocket.getPort();
Для хранения соединений и сообщений на сервере:

Потокобезопасный контейнер для хранения соединений (set или map)
LinkedBlockingDeque для хранения сообщений
Потоки, создаваемые на сервере:

writer поток (отправка сообщений клиентам)
reader потоки (читает сообщения от клиента) - на каждое соединение свой поток
Когда подключаетcя новый клиент необходимо сохранить соединение в set (или map) (когда клиент отсоединяется, удалить соединение из set (или map)).
Все полученные сообщения сохранять в блокирующей очереди - задача reader потока.
Рассылка сообщений по хранящимся в set (или map) соединениям - задача writer потока
Message implements Serializable
Обладает следующими характеристиками:

отправитель
текст сообщения
дата и время
можно добавть дополнительные свойства (для идентификации отправителя)